// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using dotnet_service.Data;

#nullable disable

namespace dotnetservice.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231209224729_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("dotnet_service.Models.Experience", b =>
                {
                    b.Property<long>("ExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ExperienceId"));

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ExperienceUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ExperienceId");

                    b.HasIndex("ExperienceUserId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("dotnet_service.Models.Profile", b =>
                {
                    b.Property<long>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ProfileId"));

                    b.Property<string>("CurrentTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurrentWorkplace")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProfileId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("dotnet_service.Models.Skill", b =>
                {
                    b.Property<long>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SkillId"));

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserSkillId")
                        .HasColumnType("bigint");

                    b.HasKey("SkillId");

                    b.HasIndex("UserSkillId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("dotnet_service.Models.Study", b =>
                {
                    b.Property<long>("StudyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("StudyId"));

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StudyLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("StudyUserId")
                        .HasColumnType("bigint");

                    b.HasKey("StudyId");

                    b.HasIndex("StudyUserId");

                    b.ToTable("Studies");
                });

            modelBuilder.Entity("dotnet_service.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserId"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("FullBlindness")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("PartialBlindness")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ProfileId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("dotnet_service.Models.Experience", b =>
                {
                    b.HasOne("dotnet_service.Models.Profile", null)
                        .WithMany("Experiences")
                        .HasForeignKey("ExperienceUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("dotnet_service.Models.Skill", b =>
                {
                    b.HasOne("dotnet_service.Models.Experience", null)
                        .WithMany("Skills")
                        .HasForeignKey("UserSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("dotnet_service.Models.Study", b =>
                {
                    b.HasOne("dotnet_service.Models.Profile", null)
                        .WithMany("Studies")
                        .HasForeignKey("StudyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("dotnet_service.Models.User", b =>
                {
                    b.HasOne("dotnet_service.Models.Profile", "Profile")
                        .WithOne()
                        .HasForeignKey("dotnet_service.Models.User", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("dotnet_service.Models.Experience", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("dotnet_service.Models.Profile", b =>
                {
                    b.Navigation("Experiences");

                    b.Navigation("Studies");
                });
#pragma warning restore 612, 618
        }
    }
}
